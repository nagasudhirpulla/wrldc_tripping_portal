// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrippingPortal.Data;

namespace TrippingPortal.WebApp.Migrations
{
    [DbContext(typeof(TrippingPortalDbContext))]
    partial class TrippingPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EventClassificationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EventEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EventStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PcmDiscussionReportFilePath")
                        .HasColumnType("text");

                    b.Property<string>("PreliminaryReportFilePath")
                        .HasColumnType("text");

                    b.Property<string>("RldcFinalReportFilePath")
                        .HasColumnType("text");

                    b.Property<string>("UtilityFinalReportFilePath")
                        .HasColumnType("text");

                    b.Property<DateTime>("UtilityFinalReportUploadTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventClassificationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.EventClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EventClassifications");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.EventEL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2019, 11, 16, 23, 48, 1, 474, DateTimeKind.Local).AddTicks(2887));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2019, 11, 16, 23, 48, 1, 477, DateTimeKind.Local).AddTicks(6774));

                    b.Property<string>("UploadUtilityId")
                        .HasColumnType("text");

                    b.Property<string>("UploadedById")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UploadUtilityId");

                    b.HasIndex("UploadedById");

                    b.ToTable("EventELs");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TrippingId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrippingId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("TrippingId");

                    b.HasIndex("TrippingId1");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Tripping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ElementName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ElementType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<int>("ForeignId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OutageTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OutageType")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RevivalTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Trippings");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingBayOwner", b =>
                {
                    b.Property<int>("TrippingId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("TrippingId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("TrippingBayOwners");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingDR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2019, 11, 16, 23, 48, 1, 482, DateTimeKind.Local).AddTicks(7443));

                    b.Property<DateTime>("FileUploadTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<bool>("IsOtherEndOrLV")
                        .HasColumnType("boolean");

                    b.Property<int>("TrippingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2019, 11, 16, 23, 48, 1, 482, DateTimeKind.Local).AddTicks(7717));

                    b.Property<string>("UploadUtilityId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TrippingId");

                    b.HasIndex("UploadUtilityId");

                    b.ToTable("TrippingDRs");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingEL", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2019, 11, 16, 23, 48, 1, 483, DateTimeKind.Local).AddTicks(4003));

                    b.Property<DateTime>("FileUploadTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<int>("TrippingId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValue(new DateTime(2019, 11, 16, 23, 48, 1, 483, DateTimeKind.Local).AddTicks(4243));

                    b.Property<string>("UploadUtilityId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TrippingId");

                    b.HasIndex("UploadUtilityId");

                    b.ToTable("TrippingELs");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingElementOwner", b =>
                {
                    b.Property<int>("TrippingId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("TrippingId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("TrippingElementOwners");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.UtilityOwner", b =>
                {
                    b.Property<string>("UtilityId")
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("UtilityId", "OwnerId");

                    b.HasIndex("OwnerId");

                    b.ToTable("UtilityOwners");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Utility", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrippingId")
                        .HasColumnType("integer");

                    b.Property<int?>("TrippingId1")
                        .HasColumnType("integer");

                    b.HasIndex("EventId");

                    b.HasIndex("TrippingId");

                    b.HasIndex("TrippingId1");

                    b.HasDiscriminator().HasValue("Utility");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Event", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.EventClassification", "EventClassification")
                        .WithMany()
                        .HasForeignKey("EventClassificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.EventEL", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrippingPortal.Core.Entities.Utility", "UploadUtility")
                        .WithMany()
                        .HasForeignKey("UploadUtilityId");

                    b.HasOne("TrippingPortal.Core.Entities.Utility", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedById");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Owner", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Tripping", null)
                        .WithMany("BayOwners")
                        .HasForeignKey("TrippingId");

                    b.HasOne("TrippingPortal.Core.Entities.Tripping", null)
                        .WithMany("ElementOwners")
                        .HasForeignKey("TrippingId1");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Tripping", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingBayOwner", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrippingPortal.Core.Entities.Tripping", "Tripping")
                        .WithMany()
                        .HasForeignKey("TrippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingDR", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Tripping", "Tripping")
                        .WithMany()
                        .HasForeignKey("TrippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrippingPortal.Core.Entities.Utility", "UploadUtility")
                        .WithMany()
                        .HasForeignKey("UploadUtilityId");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingEL", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Tripping", "Tripping")
                        .WithMany()
                        .HasForeignKey("TrippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrippingPortal.Core.Entities.Utility", "UploadUtility")
                        .WithMany()
                        .HasForeignKey("UploadUtilityId");
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.TrippingElementOwner", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrippingPortal.Core.Entities.Tripping", "Tripping")
                        .WithMany()
                        .HasForeignKey("TrippingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.UtilityOwner", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Owner", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrippingPortal.Core.Entities.Utility", "Utility")
                        .WithMany()
                        .HasForeignKey("UtilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrippingPortal.Core.Entities.Utility", b =>
                {
                    b.HasOne("TrippingPortal.Core.Entities.Event", null)
                        .WithMany("ReportUploadUtilities")
                        .HasForeignKey("EventId");

                    b.HasOne("TrippingPortal.Core.Entities.Tripping", null)
                        .WithMany("OtherEndReportUploadUtilities")
                        .HasForeignKey("TrippingId");

                    b.HasOne("TrippingPortal.Core.Entities.Tripping", null)
                        .WithMany("ReportUploadUtilities")
                        .HasForeignKey("TrippingId1");
                });
#pragma warning restore 612, 618
        }
    }
}
